#!/usr/bin/env bash

# Replaces YAML frontmatter tags in markdowns for neuron entries
#
# Author:   Mark Lucernas
# Date:     Aug 21, 2021
# License:  MIT

set -o pipefail
set -o nounset

SCRIPT_PATH="$(realpath -- "${0}")"
while [ -h "${SCRIPT_PATH}" ]; do
  SCRIPT_DIR="$(cd -P "$(dirname "${SCRIPT_PATH}")" >/dev/null 2>&1 && pwd)"
  SCRIPT_PATH="$(readlink "${SCRIPT_PATH}")"
  [[ "${SCRIPT_PATH}" != /* ]] && SCRIPT_PATH="${SCRIPT_DIR}/${SCRIPT_PATH}"
done
SCRIPT_DIR="$(cd -P "$(dirname "${SCRIPT_PATH}")" >/dev/null 2>&1 && pwd)"
SCRIPT_NAME="$(basename -- "${SCRIPT_PATH}")"

usage() {
cat << EOF
USAGE: <required> [optional]

  ./${SCRIPT_NAME} [!] <content-pattern> <tag-match> <tag-replace> [all] [exact] [directory]
  ./${SCRIPT_NAME} "title:" ".*/biology/brain" "/biology/cns/brain" 1 0

  [!]                 Only include files not matching <content-pattern>.
  <content-pattern>   regex pattern to match the file(s) content to be included
                      in tag replacement.
  <tag>               name of tag to replace.
  [all]               0 (default) to replace first match. 1 to replace all
                      matching pattern.
  [exact]             0 for loose tag matching. 1 (default) for exact tag match.
  [directory]         directory (default '.') to search into, recursively.

EOF
}

if [[ ${#} -gt 6 ]] || [[ ${#} -lt 3 ]]; then
  usage
  echo "ERROR: arg count: ${#}"
  exit 1
fi

if [[ -n ${1+x} ]]; then
  if [[ "${1}" == "!" ]]; then
    GREP_FLAGS=-rLi
    shift 1
  else
    GREP_FLAGS=-rli
  fi
else
  usage
  exit 1
fi

if [[ -n ${1+x} ]]; then
  PATTERN="${1}"
else
  usage
  exit 1
fi

if [[ -n ${2+x} ]]; then
  TAG_MATCH="${2}"
else
  usage
  exit 1
fi

if [[ -n ${3+x} ]]; then
  TAG_REPLACE="${3}"
else
  usage
  exit 1
fi

if [[ -n ${4+x} ]] && [[ "${4:-.}" != "." ]] && [[ "${4}" -eq "${4}" ]]; then
  ALL=${4}
  shift 1
else
  ALL=0
fi

if [[ -n ${4+x} ]] && [[ "${4:-.}" != "." ]] && [[ "${4}" -eq "${4}" ]]; then
  EXACT=${4}
  shift 1
else
  EXACT=0
fi

TARGET_DIR="${4:-.}"
if ! [[ -d "${TARGET_DIR}" ]]; then
  usage
  echo "ERROR: Target directory does not exist"
  exit 1
else
  # Strip trailing whitespace
  TARGET_DIR=$(echo "${TARGET_DIR}" | sed 's,/*$,,')
fi

readonly GREP_FLAGS
readonly PATTERN
readonly TAG_MATCH
readonly TAG_REPLACE
readonly ALL
readonly TARGET_DIR

readonly SCRIPT_PATH
readonly SCRIPT_DIR
readonly SCRIPT_NAME
readonly INDENT="  "
readonly CHANGELOG=".changelog.txt"

MATCH_FILES="$( \
  grep ${GREP_FLAGS} \
  --exclude-dir=".git" \
  --exclude-dir=".neuron" \
  --exclude-dir=".github" \
  --exclude-dir=".static" \
  --exclude-dir=".vscode" \
  --exclude="index.md" \
  --exclude="todo.md" \
  --exclude="faq.md" \
  --exclude="README.md" \
  --exclude="LICENSE.md" \
  -- \
  "${PATTERN}" \
  ${TARGET_DIR}/*.md \
)"

for file in $MATCH_FILES; do
  line_nr="$(awk "/tags:/{ print NR; exit }" "${file}")"

  begin_meta=0
  begin_tags=0
  while IFS='' read -r line || [ -n "${line}" ]; do

    # Bound search only within metadata space
    if [[ "${line}" == "---" ]]; then
      if [[ ${begin_meta} -eq 0 ]]; then
        begin_meta=1
        continue
      else
        break
      fi
    fi

    # Bound search only under tags meta
    if [[ "${line}" =~ tags:* ]] && [[ ${begin_tags} -eq 0 ]]; then
      begin_tags=1
      continue
    elif [[ ${begin_tags} -eq 1 ]]; then

      if [[ "${line}" =~ ${INDENT}-\ ${TAG_MATCH} ]]; then
        ((line_nr++))
        if [[ ${EXACT} -eq 1 ]]; then
          sed -i "${line_nr}s,\(${INDENT}- \)${TAG_MATCH}\( \)*$,\1${TAG_REPLACE},w ${CHANGELOG}" "${file}"
        else
          sed -i "${line_nr}s,\(${INDENT}- .*\)${TAG_MATCH}\(.*\)\( \)*$,\1${TAG_REPLACE}\2,w ${CHANGELOG}" "${file}"
        fi
        if [[ -s ${CHANGELOG} ]]; then
          echo "Replacing 'line ${line_nr}: ${line}' tag with '$(tail -n 1 ${CHANGELOG})' in ${file}..."
        fi
        if [[ ${ALL} -eq 0 ]]; then
          break
        fi
      elif [[ "${line}" =~ ${INDENT}-* ]]; then
        ((line_nr++))
        continue
      else
        break
      fi
    else
      continue
    fi
  done < ${file}

  # Delete tags: meta if no more tags
  if [[ ${begin_tags} -eq 1 ]]; then
    line_nr="$(awk "/tags:/{ print NR; exit }" "${file}")"
    next=$(sed -n "$((line_nr+1))p" "${file}")
    if [[ -n ${line_nr} ]] && ! [[ "${next}" =~ ${INDENT}-.* ]]; then
      sed -i "${line_nr}d" "${file}"
    fi
  fi

  # Delete both --- metadata fence if no more metas
  if [[ ${begin_meta} -eq 1 ]]; then
    line_nr="$(awk "/---/{ print NR; exit }" "${file}")"
    next=$(sed -n "$((line_nr+1))p" "${file}")
    if [[ -n ${line_nr} ]] && [[ "${next}" == '---' ]]; then
      sed -i "${line_nr}d" "${file}"
      sed -i "${line_nr}d" "${file}"
    fi
  fi
done

if [[ -z ${MATCH_FILES} ]]; then
  echo "no matching file"
else
  [[ -e ${CHANGELOG} ]] && rm ${CHANGELOG}
  echo "Done!"
fi
