#!/usr/bin/env bash

# Append YAML frontmatter tags in markdowns for neuron entries
#
# Author:   Mark Lucernas
# Date:     Aug 21, 2021
# License:  MIT

set -o pipefail
set -o nounset

SCRIPT_PATH="$(realpath -- "${0}")"
while [ -h "${SCRIPT_PATH}" ]; do
  SCRIPT_DIR="$(cd -P "$(dirname "${SCRIPT_PATH}")" >/dev/null 2>&1 && pwd)"
  SCRIPT_PATH="$(readlink "${SCRIPT_PATH}")"
  [[ "${SCRIPT_PATH}" != /* ]] && SCRIPT_PATH="${SCRIPT_DIR}/${SCRIPT_PATH}"
done
SCRIPT_DIR="$(cd -P "$(dirname "${SCRIPT_PATH}")" >/dev/null 2>&1 && pwd)"
SCRIPT_NAME="$(basename -- "${SCRIPT_PATH}")"

usage() {
cat << EOF
USAGE: <required> [optional]

  ./${SCRIPT_NAME} [!] <content-pattern> <tag> [start] [pos] [directory]
  ./${SCRIPT_NAME} "lorem ipsum" 'new-tag'
  ./${SCRIPT_NAME} "lorem ipsum" 'new-tag' 1 .
  ./${SCRIPT_NAME} "lorem ipsum" 'new-tag' "old-tag"
  ./${SCRIPT_NAME} ! "lorem ipsum" 'new-tag' "old-*" test-dir/

  [!]                 Only include files not matching <content-pattern>.
  <content-pattern>   regex pattern to match the file(s) content to be included
                      in tag appending.
  <tag>               name of tag to append.
  [start]             0 (default) to append to start of tags meta list, 1 to
                      append at the end of the list, or a tag to append before
                      or after to. see [pos].
  [pos]               0 to append before or 1 (default) to append after tag from
                      the matching [start].
  [directory]         directory (default '.') to search into, recursively.

EOF
}

if [[ ${#} -gt 6 ]] || [[ ${#} -lt 2 ]]; then
  usage
  echo "ERROR: arg count: ${#}"
  exit 1
fi

if [[ -n ${1+x} ]]; then
  if [[ "${1}" == "!" ]]; then
    GREP_FLAGS=-rLi
    shift 1
  else
    GREP_FLAGS=-rli
  fi
else
  usage
  exit 1
fi

if [[ -n ${1+x} ]]; then
  PATTERN="${1}"
else
  usage
  exit 1
fi

if [[ -n ${2+x} ]]; then
  TAG="${2}"
else
  usage
  exit 1
fi

if [[ -n ${3+x} ]] && ! [[ -d "${3:-.}" ]]; then
  START=${3}
  shift 1
else
  START=0
fi

if [[ -n ${3+x} ]] && [[ "${3:-.}" != "." ]] && [[ "${3}" -eq "${3}" ]]; then
  POS=${3}
  shift 1
else
  POS=1
fi

TARGET_DIR="${3:-.}"
if ! [[ -d "${TARGET_DIR}" ]]; then
  usage
  echo "ERROR: Target directory does not exist"
  exit 1
else
  # Strip trailing whitespace
  TARGET_DIR=$(echo "${TARGET_DIR}" | sed 's,/*$,,')
fi

readonly GREP_FLAGS
readonly PATTERN
readonly TAG
readonly START
readonly POS
readonly TARGET_DIR

readonly SCRIPT_PATH
readonly SCRIPT_DIR
readonly SCRIPT_NAME
readonly INDENT="  "

MATCH_FILES="$( \
  grep ${GREP_FLAGS} \
  --exclude-dir=".git" \
  --exclude-dir=".neuron" \
  --exclude-dir=".github" \
  --exclude-dir=".static" \
  --exclude-dir=".vscode" \
  --exclude="index.md" \
  --exclude="todo.md" \
  --exclude="faq.md" \
  --exclude="README.md" \
  --exclude="LICENSE.md" \
  -- \
  "${PATTERN}" \
  ${TARGET_DIR}/*.md \
)"

for file in $MATCH_FILES; do
  begin_meta=0
  begin_tags=0
  line_nr=0

  # Append at the end of tags
  while IFS='' read -r line || [ -n "${line}" ]; do
    ((line_nr++))
    # Bound search only within metadata space
    if [[ "${line}" == "---" ]]; then
      if [[ ${begin_meta} -eq 0 ]]; then
        begin_meta=1
        continue
      else
        break
      fi
    fi

    # Bound search only under tags meta
    if [[ "${line}" =~ tags:* ]] && [[ ${begin_tags} -eq 0 ]]; then
      begin_tags=1
      if [[ ${START} == '1' ]]; then
        ((line_nr++))
        break
      fi
      continue
    elif [[ ${begin_tags} -eq 1 ]]; then
      if [[ "${line}" =~ ${INDENT}-\ ${START} ]]; then
        if [[ ${POS} -eq 1 ]]; then
          ((line_nr++))
        fi
        break
      elif [[ "${line}" =~ ${INDENT}-* ]]; then
        continue
      else
        break
      fi
    else
      continue
    fi
  done < ${file}

  # Additionally append two --- if not existing at beginning of the file
  if [[ ${begin_meta} -eq 0 ]]; then
    awk "NR==1{print \"---\n---\"}1" "${file}" > tmp && mv tmp "${file}"
    line_nr=2
  fi
  # Additionally append tags meta if not exists
  if [[ ${begin_tags} -eq 0 ]]; then
    awk "NR==${line_nr}{print \"tags:\"}1" "${file}" > tmp && mv tmp "${file}"
    ((line_nr++))
  fi

  echo "Appending '${TAG}' tag into ${file}:${line_nr}..."
  awk "NR==${line_nr}{print \"${INDENT}- ${TAG}\"}1" "${file}" > tmp && mv tmp "${file}"
done

if [[ -z ${MATCH_FILES} ]]; then
  echo "no matching file"
else
  echo "Done!"
fi
